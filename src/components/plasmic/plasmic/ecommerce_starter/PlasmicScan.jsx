// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wsRXF2j5MAPa2EH2XkCbWH
// Component: froU7l2eiaU
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: HJQvpfJRA4yw/component
import Button from "../../Button"; // plasmic-import: LPkJNTjVmA5d/component
import Footer from "../../Footer"; // plasmic-import: XC4xprCxMga4/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k702YoelP3ze/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: wsRXF2j5MAPa2EH2XkCbWH/projectcss
import * as sty from "./PlasmicScan.module.css"; // plasmic-import: froU7l2eiaU/css

export const PlasmicScan__VariantProps = new Array();

export const PlasmicScan__ArgProps = new Array();

function PlasmicScan__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(defaultcss.all, projectcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__sLBa
              )}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.freeBox__uCd0C
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"scanCanvas"}
                  data-plasmic-override={overrides.scanCanvas}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.scanCanvas
                  )}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.freeBox__ocA94
                  )}
                >
                  <Button
                    data-plasmic-name={"scanStart"}
                    data-plasmic-override={overrides.scanStart}
                    className={classNames("__wab_instance", sty.scanStart)}
                    colors={"black"}
                    showStartIcon={"showStartIcon"}
                  >
                    {"Scan"}
                  </Button>
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__ihLv
              )}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"32px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loader={"plasmic"}
                src={
                  "https://www.patagonia.com/on/demandware.static/-/Library-Sites-PatagoniaShared/default/dw4b201dc8/images/for-the-planet.png"
                }
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.freeBox__yGawe
                )}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    defaultcss.__wab_text,
                    sty.text
                  )}
                >
                  {"1% of your purchase will go to a grassroot organization."}
                </div>

                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  colors={"link"}
                >
                  {"Learn more"}
                </Button>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "section",
    "scanCanvas",
    "scanStart",
    "img",
    "text",
    "button",
    "footer"
  ],

  navBar: ["navBar"],
  section: ["section", "scanCanvas", "scanStart", "img", "text", "button"],
  scanCanvas: ["scanCanvas"],
  scanStart: ["scanStart"],
  img: ["img"],
  text: ["text"],
  button: ["button"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicScan__ArgProps,
      internalVariantPropNames: PlasmicScan__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicScan__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScan";
  } else {
    func.displayName = `PlasmicScan.${nodeName}`;
  }
  return func;
}

export const PlasmicScan = Object.assign(
  // Top-level PlasmicScan renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    section: makeNodeComponent("section"),
    scanCanvas: makeNodeComponent("scanCanvas"),
    scanStart: makeNodeComponent("scanStart"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicScan
    internalVariantProps: PlasmicScan__VariantProps,
    internalArgProps: PlasmicScan__ArgProps
  }
);

export default PlasmicScan;
/* prettier-ignore-end */
