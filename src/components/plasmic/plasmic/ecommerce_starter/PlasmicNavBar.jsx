// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wsRXF2j5MAPa2EH2XkCbWH
// Component: HJQvpfJRA4yw
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: LPkJNTjVmA5d/component
import TextInput from "../../TextInput"; // plasmic-import: 3TiJbjI8iVeh/component
import MetamaskConnect from "../../MetamaskConnect"; // plasmic-import: FQcGunBNSB/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: wsRXF2j5MAPa2EH2XkCbWH/projectcss
import * as sty from "./PlasmicNavBar.module.css"; // plasmic-import: HJQvpfJRA4yw/css
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: xGR87mEf2QZ-/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: BlveaajrUQt0/icon
import SecureIcon from "./icons/PlasmicIcon__Secure"; // plasmic-import: 9YAqV-BggB1W/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: mCQmbx_UCDP_/icon
import CartIcon from "./icons/PlasmicIcon__Cart"; // plasmic-import: NMaiZAwp1RLX/icon

export const PlasmicNavBar__VariantProps = new Array("filled", "searchOpen");

export const PlasmicNavBar__ArgProps = new Array();

function PlasmicNavBar__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__searchOpen]: hasVariant(
            variants,
            "searchOpen",
            "searchOpen"
          )
        }
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox___9K4JB,
          {
            [sty.freeBox__filled___9K4JBCiFcQ]: hasVariant(
              variants,
              "filled",
              "filled"
            ),

            [sty.freeBox__searchOpen___9K4JB1PoPq]: hasVariant(
              variants,
              "searchOpen",
              "searchOpen"
            )
          }
        )}
      >
        <Button
          data-plasmic-name={"homeButton"}
          data-plasmic-override={overrides.homeButton}
          link={"/"}
          showStartIcon={"showStartIcon"}
          startIcon={
            <HomeIcon
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg__yjzc4
              )}
              role={"img"}
            />
          }
        >
          {true ? (
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__qxjyo
              )}
            >
              {"Home"}
            </div>
          ) : null}
        </Button>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__yR7Vl,
            {
              [sty.freeBox__searchOpen__yR7Vl1PoPq]: hasVariant(
                variants,
                "searchOpen",
                "searchOpen"
              )
            }
          )}
        >
          {(hasVariant(variants, "searchOpen", "searchOpen") ? false : true) ? (
            <Button
              data-plasmic-name={"searchButton"}
              data-plasmic-override={overrides.searchButton}
              className={classNames("__wab_instance", sty.searchButton, {
                [sty.searchButton__searchOpen]: hasVariant(
                  variants,
                  "searchOpen",
                  "searchOpen"
                )
              })}
              iconOnly={"iconOnly"}
              link={"/category"}
              startIcon={
                <SearchIcon
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.svg___9D8NY
                  )}
                  role={"img"}
                />
              }
            >
              {"Menu"}
            </Button>
          ) : null}
          {(hasVariant(variants, "searchOpen", "searchOpen") ? true : true) ? (
            <TextInput
              data-plasmic-name={"searchInput"}
              data-plasmic-override={overrides.searchInput}
              className={classNames("__wab_instance", sty.searchInput, {
                [sty.searchInput__searchOpen]: hasVariant(
                  variants,
                  "searchOpen",
                  "searchOpen"
                )
              })}
              placeholder={"Search..."}
            />
          ) : null}
          {true ? (
            <MetamaskConnect
              data-plasmic-name={"metamaskConnect"}
              data-plasmic-override={overrides.metamaskConnect}
              className={classNames("__wab_instance", sty.metamaskConnect)}
            />
          ) : null}
          {true ? (
            <Button
              data-plasmic-name={"loginButton"}
              data-plasmic-override={overrides.loginButton}
              className={classNames("__wab_instance", sty.loginButton)}
              colors={"black"}
              rounded={"rounded"}
              size={"narrow"}
            >
              {"Login"}
            </Button>
          ) : null}

          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            colors={"lightGrayOutline"}
            link={"/scan"}
            rounded={"rounded"}
            showStartIcon={"showStartIcon"}
            size={"narrow"}
            startIcon={
              <SecureIcon
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.svg__tfR06
                )}
                role={"img"}
              />
            }
          >
            {"Scan"}
          </Button>

          <Button
            data-plasmic-name={"profileButton"}
            data-plasmic-override={overrides.profileButton}
            iconOnly={"iconOnly"}
            link={"/wallet"}
            startIcon={
              <ProfileIcon
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.svg__raKpK
                )}
                role={"img"}
              />
            }
          >
            {"Menu"}
          </Button>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__rmsW9
            )}
          >
            {true ? (
              <Button
                data-plasmic-name={"cartButton"}
                data-plasmic-override={overrides.cartButton}
                className={classNames("__wab_instance", sty.cartButton, {
                  [sty.cartButton__filled]: hasVariant(
                    variants,
                    "filled",
                    "filled"
                  )
                })}
                colors={"white"}
                link={"/cart"}
                rounded={"rounded"}
                showStartIcon={"showStartIcon"}
                startIcon={
                  <CartIcon
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.svg__crTei
                    )}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    defaultcss.__wab_text,
                    sty.text__yUitN,
                    {
                      [sty.text__filled__yUitNCiFcQ]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "filled", "filled") ? "1" : "0"}
                </div>
              </Button>
            ) : null}
          </div>

          {true ? (
            <Button
              data-plasmic-name={"logoutButton"}
              data-plasmic-override={overrides.logoutButton}
              className={classNames("__wab_instance", sty.logoutButton)}
              colors={"gray"}
              rounded={"rounded"}
              size={"narrow"}
            >
              {"Logout"}
            </Button>
          ) : null}
        </p.Stack>
      </div>
    </section>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "homeButton",
    "searchButton",
    "searchInput",
    "metamaskConnect",
    "loginButton",
    "button",
    "profileButton",
    "cartButton",
    "logoutButton"
  ],

  homeButton: ["homeButton"],
  searchButton: ["searchButton"],
  searchInput: ["searchInput"],
  metamaskConnect: ["metamaskConnect"],
  loginButton: ["loginButton"],
  button: ["button"],
  profileButton: ["profileButton"],
  cartButton: ["cartButton"],
  logoutButton: ["logoutButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBar__ArgProps,
      internalVariantPropNames: PlasmicNavBar__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    homeButton: makeNodeComponent("homeButton"),
    searchButton: makeNodeComponent("searchButton"),
    searchInput: makeNodeComponent("searchInput"),
    metamaskConnect: makeNodeComponent("metamaskConnect"),
    loginButton: makeNodeComponent("loginButton"),
    button: makeNodeComponent("button"),
    profileButton: makeNodeComponent("profileButton"),
    cartButton: makeNodeComponent("cartButton"),
    logoutButton: makeNodeComponent("logoutButton"),
    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
